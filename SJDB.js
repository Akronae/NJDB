// SJDB, made by Alexandre Daubricourt @2016, 1.0.0 released 11/13/2016, for un-optimized code version, please look at:
var fs=require("fs"),readline=require("readline"),JDatabase=function(l,k){var a=this;this.dir={path:l};this.file={path:k};this.db={isCompressed:!1,isCompacted:!1};this.core={handleEx:!1,log:{active:!1,dir:(this.dir.path+this.file.path+"/log").toString()},SJDBfy:function(d){return a.db.isCompacted?JSON.stringify(d):JSON.stringify(d,null,4)},compress:function(){var d=fs.readFileSync(a.dir.path+"/"+a.file.path+".json"),d=JSON.parse(d),d=JSON.stringify(d);fs.writeFileSync(a.dir.path+"/"+a.file.path+".json",
d)},fancify:function(){var d=fs.readFileSync(a.dir.path+"/"+a.file.path+".json"),d=JSON.parse(d),d=JSON.stringify(d,null,4);fs.writeFileSync(a.dir.path+"/"+a.file.path+".json",d)}};if(1==this.core.handleEx)process.on("uncaughtException",function(d){a.log.write("An exeption occured, SJDB handle every exeptions for data security, if you want that SJDB stop handling exeptions, set 'db.core.handleEx = false', error: \n"+d,"danger")});this.tables={};this.create=function(){var d=!0,f=!0;try{fs.accessSync(a.dir.path)}catch(b){d=
!1,fs.mkdirSync(a.dir.path),a.log.write("Creating directory..","info")}try{fs.accessSync(a.file.path)}catch(b){f=!1}d?a.log.write(a.dir.path+" directory already exists! For security reasons, to overwrite your databases, please delete them manualy.","danger"):f?a.log.write(a.file.path+" database already exists! For security reasons, to overwrite your database, please delete it manualy.","danger"):fs.writeFileSync(a.dir.path+"/"+a.file.path+".json",a.core.SJDBfy({}))};this.table=function(d){var f=a.dir.path+
"/"+a.file.path+".json";a.tables[d]={name:d,create:function(){var b=fs.readFileSync(f,"utf8"),b=JSON.parse(b);b[d]?a.log.write('table "'+d+'" already exists! For security reasons, to overwrite it, please delete this table manualy.',"danger"):(b[d]={},fs.writeFileSync(f,a.core.SJDBfy(b)))},put:function(b,c){var e=fs.readFileSync(f,"utf8"),e=JSON.parse(e);e[d][b]?a.log.write('key "'+b+'" already exists! For security reasons, to overwrite it, please delete this key manualy.',"danger"):(e[d][b]=c,fs.writeFileSync(f,
a.core.SJDBfy(e)),a.log.write("Put "+c+" as "+b+" in "+f))},get:function(b,c){var e=fs.readFileSync(f,"utf8"),e=JSON.parse(e);if(!b)return e[d];if(e[d][b])return c?a.core.SJDBfy(e[d][b]):e[d][b];a.log.write('key "'+b+"\" doesn' exists!","danger")},update:function(b,c){var e=fs.readFileSync(f,"utf8"),e=JSON.parse(e);e[d][b]?(e[d][b]=c,fs.writeFileSync(f,a.core.SJDBfy(e))):a.log.write('key "'+b+"\" doesn' exists!","danger")},"delete":function(b){var c=fs.readFileSync(f,"utf8"),c=JSON.parse(c);b?c[d][b]?
(delete c[d][b],fs.writeFileSync(f,a.core.SJDBfy(c)),a.log.write("Key "+b+" of table "+d+" was deleted!")):a.log.write('key "'+b+"\" doesn' exists!","danger"):c[d]?(delete c[d],fs.writeFileSync(f,a.core.SJDBfy(c)),a.log.write("Table "+d+" deleted!")):a.log.write("table "+d+" doesn't exists!","danger")}};return a.tables[d]};this.log={write:function(d,f){if(a.core.log.active){void 0==f&&(f="log");var b=new Date,b=(b.toLocaleDateString()+"|"+b.toLocaleTimeString()).toString(),c,e;"info"==f&&(c="color: blue;",
e="color: white");"log"==f&&(c="color: #888888;",e="color: white;");"danger"==f&&(c="color: red;",e="font-weight: 600; color: red;");"success"==f&&(c="color: green;",e="font-weight: 100; color: #2ecc71;");fs.appendFile(a.dir.path+a.file.path+"/log.log",b+" ["+f+"] >> "+d+"\n");fs.appendFile(a.dir.path+a.file.path+"/log.html",'<span style="color:grey;">'+b+'</span><span style="'+c+'"> ['+f+']</span> >> <span style="'+e+'">'+d+"</span><br/>");console.log(d)}},open:function(){var a=require("child_process").exec,
f=process.platform;"win32"==f||"win64"==f?a("cd database & log.html",function(a,c,d){a&&console.log(a)}):"linux"==f&&a("cd database & xdg-open log.html",function(a,c,d){this.log.write(c)})},clear:function(){fs.writeFileSync(a.dir.path+a.file.path+"/log.log","");fs.writeFileSync(a.dir.path+a.file.path+"/log.html",'<link href="https://fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet"> <style>html {font-family: "Inconsolata", monospace; background: black; color: white;}</style>')}};this.QueryCLI=
function(d){void 0==d&&(d="-/");var f=require("querystring");console.log("< SJDB Query CLI started >");readline.createInterface({input:process.stdin,output:process.stdout}).on("line",function(b){if(b.substring(0,d.length).toString()==d){b=b.substring(d.length,b.length);b=f.parse(b,".");var c=[],e;for(e in b)c.push(e);if("db"==c[0])if("create()"==c[1])a.create();else if("table"==c[1].substring(0,5)){e="";b=c[1].substring(6,c[1].lenght);for(var g in b)"'"!=b[g]&&")"!=b[g]&&" "!=b[g]&&(e+=b[g]);if("get"==
c[2].substring(0,3)){b=c[2].substring(4,c[2].lenght);var h="";for(g in b)"'"!=b[g]&&")"!=b[g]&&(h+=b[g]);a.log.write(a.table(""+e).get(""+h),"info")}else if("put"==c[2].substring(0,3)){b=c[2].substring(4,c[2].lenght);g={};b=f.parse(b,",");c=0;for(h in b)g[c]=h,c++;g[1]=g[1].toString().slice(1,-1);g[0]=g[0].replace(/[\"\']+/g,"");g[1]=g[1].replace(/[\"\']+/g,"");a.table(e).put(g[0],g[1])}else if("update"==c[2].substring(0,6)){b=c[2].substring(7,c[2].lenght);g={};b=f.parse(b,",");c=0;for(h in b)g[c]=
h,c++;g[1]=g[1].toString().slice(1,-1);a.table(e).update(g[0],g[1])}else"create()"==c[2].substring(0,8)?a.table(""+e).create():"delete"==c[2].substring(0,6)?"delete()"==c[2]?a.table(e)["delete"]():(h=c[2].substring(8,c[2].lenght).toString(),h=h.slice(0,-2),a.table(e)["delete"](h)):a.log.write("Invalid SJDB CLI command!","danger")}else"log"==c[1]?"open()"==c[2]?a.log.open():"clear()"==c[2]&&a.log.clear():"core"==c[1]?"compress()"==c[2]?a.core.compress():"fancify()"==c[2]?a.core.fancify():a.log.write("Invalid SJDB CLI command!",
"danger"):a.log.write("Invalid SJDB CLI command!","danger");else"help"==c[0]?console.log("< SJDB Query CLI help >\n\n"+d+"db\n    .create('dbName'): Create a new database.\n    .table('tableName'): Select table as target.\n        .create(): Create new table as '.table()' argument.\n\t.put('key', 'value'): Insert string or int as key into db, don't support objects. Use real editor.\n        .update('key', 'newValue'): Update key.\n        .get('key', 'value'): Get value from key.\n        .delete('key'): Remove key and he's value.\n        .get(): Get table.\n        .delete(): Delete table.\n    .log\n        .open(): Open logs in HTML file.\n        .clear(): Clear logs.\n    .core\n        .compress(): Improve database's speed by compressing data, use only for production.\n        .fancify(): Fancify database for humain readability, less faster, use this command only for reading.\n    .makeBenchmark(ops): Run a benchmark on a new db with arg Put, Update, Delete operations.\n"):
"makeBenchmark"==c[0].substring(0,13)?(h=c[0].substring(14,a.length),h=h.substring(0,h.length-1),makeBenchmark(h)):a.log.write("Invalid SJDB CLI command!","danger")}})}};
function makeBenchmark(l){if(void 0==l)console.error("Need number of operations in argument.");else{"linux"!=process.platform&&console.warn("Starting benchmark for "+l+" ops, keep in mind that your OS can slow down nodejs process, for this reason, you should benchmark on a real server.");var k=new JDatabase("./~BENCHMARK~",Math.random().toString().substring(14));k.create();k.table("Benchmark").create();console.time("Put");k.table("Benchmark").create();for(var a=0;a<l;a++)k.table("Benchmark").put(a,
a);console.timeEnd("Put");console.time("Update");for(a=0;a<l;a++)k.table("Benchmark").update(a,"klj");console.timeEnd("Update");console.time("Delete");for(a=0;a<l;a++)k.table("Benchmark")["delete"](a.toString());fs.existsSync(k.dir.path)&&(fs.readdirSync(k.dir.path).forEach(function(a,f){var b=k.dir.path+"/"+a;fs.lstatSync(b).isDirectory()?deleteFolderRecursive(b):fs.unlinkSync(b)}),fs.rmdirSync(k.dir.path));console.timeEnd("Delete");console.log("When there is more than 1 000 keys in the same file, we recommand you to split a big database into smallers databases.")}}
module.exports={JDatabase:JDatabase,makeBenchmark:makeBenchmark};
